---
title: "Introducción a R"
author: "Christian Urcuqui"
date: "24 de septiembre de 2018"
output: 
  html_document:
    toc: true
    toc_depth: 2
  
---
example(print)


##Introducción


<img src="https://github.com/urcuqui/Data-Science/blob/master/Utilities/r.jpeg?raw=true" width="250" height="250">
<br>

En este notebook se presentará una introducción a la programación en R para su uso en proyectos de ciencia de datos.


###Motivación

Debido a los grandes volumenes de información que se presentan hoy en día la forma de analizar los datos ha estado cambiando. Algunas personas han mencionado que "Los datos son el petróleo del siglo xxi".

La ciencia de datos a partir de sus técnicas (por ejemplo, estadísticas, visuales, econométricas y de aprendizaje de máquina) han permitido descubrir y explotar la información. 

Antiguamente, los investigadores solían publicar sus resultados en prestigiosas revistas y la implementación de sus descubrimientos en software tomaba mucho tiempo.

Actualmente, los investigadores y la industria han mejorado sus métodos en conjunto con la implementación de software, estos resultados ahora se encuentran en sitios web de fácil acceso (en muchos casos con licencia open source)

###R 

R es un entorno y un lenguaje para computación estadística y gráfica desarrollado en Bell Labs, un proyecto que surge de la implemententación del software libre S. Nace en el depto. de estadística de la Universidad de Auckland, Nueva Zelanda (Ross Ihaka and Robert Gentleman) en el año de 1993.


Una solución open source para análisis de datos soportado por varias comunidades científicas en todo el mundo.

R tiene muchas ventajas frente a los otros software comerciales de alto costo para uso de análisis de datos, estas son:

+ Es una tecnología gratuita a diferencia de otros software comerciales de altos costos.
+ Tiene comunidades muy activas, casi semanalmente se proponen nuevos paquetes estadísticos y actualizaciones, lo cual a llevado a los sistemas comerciales a integrar R.  
+ Es más fácil la automatización ya que se pueden desarrollar scripts (líneas de código con un propósito especifico) que permiten ejecutar el análisis varias veces.
+ Leer casi cualquier tipo de datos (.txt, .csv, .dat), también, existen paquetes que permiten leer información de archivos JSON, Excel, STATA, SAS. E incluso utilizar datos de sitios web y de sistemas de base de datos (Por ejemplo, MySQL y, PostgresSQL)


##Descarga e instalación de R

Como hemos mencionado, R es un proyecto __open source__, su descarga se puede encontrar en el sitio web de Comprehensive R Archive Network (CRAN):

http://cran.r-project.org.

De la anterior página podemos descargar los archivos binarios para instalación en sistemas operativos Linux, Mac OS X, y Windows. 


## Trabajando con R

R es un lenguaje interpretado, es decir, que podemos digitar un comando a la vez con R o se puede ejecutar un archivo que contenga las líneas de código y el interprete ejecutará linea por linea . 

Muchos de los datos y variables son almacenadas en memoria durante una sesión. Nosotros podemos guardar una sesión con la finalidad de conservar nuestro trabajo para futuras sesiones. 

R utiliza el símbolo __<-__ para detonar una asignación, a diferencia del típico = utilizado en muchos otros lenguajes de programación, a continuación, verá un ejemplo de una asignación a la variable _x_, a esta variable se le asigna un vector de 5 valores a través de la función rnorm (el llamado a funciones lo veremos más adelante en este mismo notebook).

```
x <- rnorm(5)
```

Por favor escriba el anterior ejemplo y ejecutelo en el próximo espacio.

_Ejercicio 1_
```{r example1}
## Escriba el ejemplo en el siguiente espacio (1 línea de código) ##
# --------------------------- #
x
```

Los comentarios sobre el código podemos agregarlos con _#_.

Ahora, si deseamos obtener mayor información sobre una función podemos utilizar la opción de ayuda con R a través de _?_, ejecute el siguiente ejemplo en su consola.


_Ejercicio 2_
Consulte la ayuda a través de R estudio para entender en qué consiste el paquete "base" de R. ¿Qué ofrece el paquete, explore su contenido? 

R/




```
?rnorm
```

Como hemos mencionado, la aplicación de la función rnorm nos dio un vector de cinco valores. Ahora si deseamos crear un vector con unos valores especificos y asignarlo a una variable, debemos proceder a digitar la función _c_ seguido de los valores que queremos tener dentro de _()_ y cada valor separado por _,_, por favor, digite el siguiente ejemplo en el espacio de código.  

```
vector <- c(1,4,5,6)
```

Un vector es un objeto de una sola dimensión donde sus valores pueden ser de un sólo tipo, por ejemplo, de tipo caracter, númericos, o lógicos.
```{R vector}
x <-c(0.5, 0.6) # numérico
typeof(x)
x <-c(TRUE, FALSE) #logico
typeof(x)
x <-c("a", "b", "c") #caracter
typeof(x)
x <-c(10:20) # integer/entero
typeof(x)
x <-c(1+0i, 2+4i) #compleja
typeof(x)
```

_Ejercicio 3_

Escriba un vector de enteros con cuatro elementos

```{R example2}
# Escriba un vector de enteros con cuatro elementos (1 línea de código)
# --------------------------- #
vector
```
Hemos creado un vector de cuatro valores y lo hemos asignado a la variable _vector_.

##Markdown

Markdown es un lenguaje de marcado ligero para formar archivos de texto, al utilizar este medio podrás producir archivos de texto plano (legibles por gran parte de los dispositivos). 

Gran parte de las plataformas que permiten alojar sitios web estáticos que aceptan Markdown (un ejemplo de estos es GitHub) y traducen estos archivos como elementos HTML para su visualización en la web. 

Los archivos R Markdown(.Rmd) permiten crear archivos con codificación enriquecida, es decir, contienen el código, los resultados de este (por ejemplo,  operaciones y visualizaciones) más texto y elementos desde Markdown.

Este tipo de archivos permiten crear reportes o documentos en archivos .html, .pdf, entre otros.

Además, es un mecanismo que nos permite escribir elementos LaTeX, por ejemplo, expresiones matemáticas.


<b>Error function</b>

$Error=-\frac{1}{m}\sum_{i=1}^{m} (1-y_{i})(ln(1-\hat{y}_{i})) + y_{i}ln(\hat{y}_{i})$

$$ W^{(1)} = 
\left(\begin{array}{cc} 
W^{(1)}_{11} & W^{(1)}_{12}\\
W^{(1)}_{21} & W^{(1)}_{22}\\
W^{(1)}_{31} & W^{(1)}_{32}
\end{array}\right)
W^{(2)} =
\left(\begin{array}{ds} 
W^{(2)}_{11} \\ 
W^{(2)}_{21} \\
W^{(2)}_{31}
\end{array}\right)
$$ 


##Ejemplos de la aplicación de R

A continuación, se presentan algunos ejemplos de la aplicación de R en visualizaciones y en analítica predictiva

_Ejemplos Scatter plots_
```{R scatter_plot_example1}
demo(persp)
demo(image)
demo(glm.vr)
```

##Input y output

R por defecto inicializa su trabajo obteniendo las entradas desde el teclado y despliega las salidas por al consola. Pero, es posible cambiar estas opciones, en los siguientes dos ejemplos ejecutaremos scripts con contenido de código en R llamándolos desde nuestro directorio script principal, luego procederemos a cambiar las salidas de los resultados a dos tipos de formatos.

Descargue el archivo example2.R, en el archivo actual de R que se encuentra trabajando utilice la función source() y dentro del paréntesis escriba el nombre del archivo descargado, es decir, source("example2.R). Finalmente, ejecute la anterior instrucción y observará que hará un llamado a un archivo externo con líneas de código. 

```{R inputExample}
source("../example2.R")
```
```{R outputExample, echo=FALSE}
source("../example3.R")
```

Existen varias funciones que nos permiten crear archivos de distinto tipo, por ejemplo:

<ul>
  <li>
  pdf("filename.pdf")
  </li>
  <li>
  png("filename.png")
  </li>
  <li>
  jpeg("filename.jpeg")
  </li>
  <li>
  bmp("filename.bmp")
  </li>
<ul>


##Sesiones y workspace

Es recomendable establecer la dirección del directorio de trabajo, este proceso podemos ejecutarlo a través de la opción que se encuentra en _Session_ en RStudio. También, podemos establecer este conjunto de actividades desde líneas de código, por ejemplo:
+ Podemos conocer el actual directorio con la función  ```getwd()```
+ Para cambiar el directorio actual a través de la función ```setwd()``` ingresándole por parámetro la ruta del directorio.

Procedamos a un tercer ejercicio, vamos a crear una tabla a través de la asignación de vectores, utilizaremos unas funciones predefinidas en R para estadística descriptiva y vamos a crear un gráfico. 

Por favor, cree dos vectores para las columnas __Age (mo.)__ y __Weight (kg.)__.


<img src='https://github.com/urcuqui/Data-Science/blob/master/Utilities/R/table.png?raw=true' width='250' height='250'>

_Ejercicio 4_

```{R example3}
# Por favor escriba los dos vectores en el siguiente espacio (2 lineas de código)
# --------------------------- #
print("Vector de Age")
age
print("Vector de Weight")
weight
print("Desviación estandar")
sd(weight)
print("Correlación entre age y weight")
cor(age, weight)
print("gráfico de age versus weight")
plot(age, weight)
```

##Paquetes

Existen numerosas funciones de R en distintos paquetes que nos pueden facilitar la vida. La instalación de un paquete se realiza a través de:

```
install.packages("nombre del paquete")
```
Como hemos mencionado, constantemente las comunidades lanzan nuevas versiones de sus paquetes ya sea para incorporar nuevas funcionalidades o para corregir algún error; si deseamos estar en la ultima versión podemos utilizar el siguiente comando: 

```
update.packages()
```

Para cargar el paquete que necesitamos utilizar en nuestro entorno de trabajo debe utilizar el siguiente comando en conjunto con el nombre del paquete
```
library(gclus) 
```
Para este siguiente ejercicio escriba las lineas de código que permitan instalar los paquetes "tidyverse" y "nycflights13", luego cargue ambos al entorno de trabajo.

Es probable que el paquete ya se encuentre instalado. 

_Ejercicio 5_
```{R example4}
# Escriba el código que permita instalar y cargar los dos paquetes (cuatro líneas)
# --------------------------- #
```

Podemos encontrar más información de paquetes disponibles en la siguiente página:
https://cran.r-project.org/web/packages/

##Funciones

Cada paquete trae consigo una serie de funciones y la única forma de acceder a estas utilidades es cargando paquete a paquete a nuestro entorno de trabajo, la estructura general de una función puede interpretarse de la siguiente manera:
```
nombre_funcion(parametro1 = valor1, parametro2 = valor2, ...)
```

_Ejercicio 6_

Utilice la ayuda y explore la utilidad de las funciones "abs" y "sqrt".

R/



Para nuestro próximo ejercicio utilizaremos la función _seq_, por favor utilice la opción de ayuda en la consola y luego en el siguiente cuadro de código digite una línea que utilice la función para crear un vector de valores del 1 hasta el 10.

_Ejercicio 7_
```{R example5}
# Escriba el código que utilice la funcion seq y cree un vector de valores del 1 hasta el 10 (1 línea de código)
# --------------------------- #
vector
```

Un programador también puede definir sus propias funciones con el fin de crear fragmentos reutilizables de código que tienen una función que puede ser reutilizada en varias partes del proyecto o en otros.


```{R example}
pairList <- function(array)
{
#dentro de los {} van las lineas de código de la función
for (number in array)
  {
    if(number%%2==0)
    {
      print(number)  
    }
  }
}
lista <- seq(1,10)
pairList(lista)
```


##Creando un dataset y exploración básica de datos


###Vector

Ahora observemos como recorrer un vector
_Ejercicio 8_

Cree un vector con nombre a y asignele los siguientes valores: k, j, h, a, c y m. 
```{R vector2}
# 1 linea de código
# --------------------------- #
```

Ejecute cada una de las siguienes lineas de código. ¿Qué se obtiene en cada caso?
```{R exampleVector2}
a[3]
a[c(1, 3, 5)]
a[2:6]
```
R1/ 

R2/

R3/

###Matriz

Son arreglos de dos dimensiones en donde todos los registros son del mismo tipo, ejecute el siguiente código con el fin de observar las diferencias con el vector de una dimensión

_Ejemplo de matriz_

```{R matrizExample}
x <- matrix(1:20, nrow=5, ncol=4)
x
print("")
class(x)
```

Observe como fue el proceso de ingreso de los datos, realice los cambios necesarios con el fin que el ingreso de los datos sea por filas. 

_Ejercicio 9_
```{R matrizExample2}
# 2 lineas de código
# -------------------------
```


Ahora veamos como obtener los elementos de la matriz, para accederlos escribimos los indices(número) de la siguiente forma X[_i_,_j_]$ donde _i_ corresponde al indice de la fila y _j_ al indice de las columnas.

```{R matrizExample3}
x[ , 2] #obtenemos los elementos de la segunda columna
x[1, ] #obtenemos los elementos de la primera fila
x[5 , 3] #obtenemos el elemento ubicado en la quinta fila y tercera columna 
```


La función _row.names()_ nos permite asignar nombres a las filas de la matriz, ejecute el siguiente código y observe el resultado.

```{R matrizExample4}
# 2 lineas de código
names <- c("R1", "R2", "R3", "R4", "R5")
row.names(x) <- names 
x
# ----------
```
Los nombres actúan como etiquetas, específicamente, es una opción para reemplazar los índices. 

```{R matrizExample5}
x["R4",] 
```

De la misma forma que en las filas, podemos encontrar la función para las columnas _colnames_.

###Arrays

Los arrays son similares a las matrices pero pueden tener más de dos dimensiones, la forma de crearlo es a través de la siguiente función:
```
myarray <- array(vector, dimensions, dimnames)
```
_vector_ contiene los datos para el array, _dimensions_ es un vector numérico que expresa el máximo índice para cada dimensión y _dinmanes_ es una lista que es opcional y que contiene las etiquetas. 

_Ejemplo Array_
En el siguiente ejemplo crearemos un array de tres dimensiones (2x3x4) de números.
```{R ArrayExample}
dim1 <- c("A1", "A2")
dim2 <- c("B1", "B2", "B3")
dim3 <- c("C1", "C2", "C3", "C4")
z <- array(1:24, c(2,3,4), dimnames=list(dim1, dim2, dim3))
z
```

### Data frames

Vamos a utilizar un conjunto de datos ( __dataset__ ) de los vuelos realizados en la ciudad de Nueva York en 2013. Ejecutemos el siguiente código que nos permitirá ver nuestro data.frame

```{R provided}
# La siguiente línea de código especifica que vamos a utilizar "flights" del paquete nycflights13, el uso de :: se realiza con la finalidad que no se presenten problemas si hay más variables "flights" en nuestro entorno de trabajo.
nycflights13::flights
flights
```

El _Data frame_ es más general que una matriz ya que puede almacenar diferentes tipos de datos (númericos, carácteres, etc.). Es la estructura más utilizada en los proyectos de R. 

Con la finalidad que podamos tener una primera idea de nuestros datos, vamos a utilizar la función str, en primer lugar, escriba la ayuda de _?str_ y obtenga más información de esta.

Ahora digite la función str sobre el objeto flights.

_Ejercicio 9_
```{R example6}
# Escriba el código que utilice la funcion str en el objeto flights (1 línea de código)
# --------------------------- #
```

+ ¿Que puede inferir a través de la anterior función?
+ Observe la cantidad de registros y variables
+ observe los tipos de variables 

Flights es un tipo de estructura en R conocida como data.frame. Si deseamos conocer el tipo de objeto con el cual estamos trabajando podemos obtener este tipo de información a través de la función _class()_. Digite el siguiente código en su consola de comandos.

```
class(flights)
```
Ahora, también podemos ver la información de nuestro data.frame como si fuera una hoja de trabajo en Excel. Utilice el siguiente código en su consola de comandos de RStudio.
```
View(flights)
```
Ahora, vamos a crear nuestro propio data.frame a través de la función ```data.frame()```:
```
mydata <- data.frame(col1, col2, col3,.)
```
```col1, col2, col3``` son columnas con vectores de cualquier tipo (numérico, carácter, o lógico). Los nombres de las columnas se pueden declarar a través de la función _names_.
```{R Dataframe1}
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
status <- c("Poor", "Improved", "Excellent", "Poor")
patientData <- data.frame(patientID, age, diabetes, status)
patientData
```

La forma de acceder a la información en el data.frame se puede realizar de varias maneras muy similar que las matrices.

```{R Dataframe2}
patientData[1:2] #obtenemos los elementos desde la columna 1 hasta la 2
print("")
patientData[c("diabetes","status")] #obtenemos los elementos a través de la etiqueta de las columnas
print("")
patientData$diabetes #retorna solo un vector de valores de la columna 
```

_$_ nos permite seleccionar directamente la columna del data.frame declarado, a continuación, se muestra un ejemplo de una _tabulación cruzada_ entre las variables status y diabetes.

```{r crosstable}
table(patientData$diabetes, patientData$status) #tabulación cruzada
```


###Las funciones attach, detach y with


La función attach() agrega el data.frame al directorio de busqueda de R. Cuando el nombre de una variable es encontrada, los data frames del directorio de busqueda son evaluados con el fin de encontrar la variable. 

Vamos a utilizar el siguiente código que utilizará el dataset de mtcars y las variables que lo componen con el fin de generar un resumen de análisis descriptivo (summary) y dos plots. 


```{r attachExample}
summary(mtcars$mpg)
plot(mtcars$mpg, mtcars$disp)
plot(mtcars$mpg, mtcars$wt)
```

Este mismo resultado podemos utilizarlo a través de las funciones attach y detach. ¿Que utilidad tiene?

```{r attachExample2}
attach(mtcars)
  summary(mpg)
  plot(mpg, disp)
  plot(mpg, wt)
detach(mtcars)
```
Este enfoque tiene limitaciones cuando los objetos almacenados en memoria tienen el mismo nombre. 

```{r attachExample3}
mpg <- c(25, 36, 47)
attach(mtcars)
  plot(mpg, wt)
detach(mtcars)
mpg
```

Para estos casos se puede utilizar un enfoque distinto a través de la función _with()_, apliquemos esta alternativa con el ejemplo anterior. ¿Qué utilidad observa?

```{r attachExample4}
mpg <- c(25, 36, 47)
with(mtcars, {
  summary(mpg, disp, wt)
  plot(mpg, disp)
  plot(mpg, wt)
})
# El uso de los {} es opcional
 
```

La limitación con with es que cualquier objeto creado o asignado solo tendrá representación dentro de él. 

```{r attachExample5}
with(mtcars, {
  stats <- summary(mpg)
  stats
})
stats
 
```
Si es necesario crear o asignar a un objeto dentro de este debemos utilizar el operador <<-
```{r attachExample6}
with(mtcars, {
  nokeepstats <- summary(mpg)
  keepstats <<- summary(mpg)
})
keepstats
nokeepstats
 
```

###Factor

Existe un tipo de objeto conocido como Factor en donde sus valores son categóricos, específicamente, nominales u ordinales. 


```{R factorExample1}
diabetes <- c("Type1", "Type2", "Type1", "Type1")
diabetesFactor <- factor(diabetes) 
```

Cree el siguiente factor y observe el orden de los niveles

```{R factorExample2}
x <- factor(c("yes", "yes", "no", "yes", "no"))
```

Para cambiar el orden de los niveles se especifica el parámetro "levels" en el orden deseado
```{R factorExample3}
x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes", "no"))
```
_Ejercicio 10_

Escriba y ejecute el código necesario para crear el factor ordinal ```PartientStatus(Poor, Improved, Excellent)``` y los niveles que impliquen que poor es el menor. Se recomienda utilizar la ayuda de R con el fin de definir el tipo de factor. 

```{R ejercicioFactor1}
# 1 linea de código
# -------------------
PatientStatus
```

_Ejercicio 11_

Si x <- c(1, 2, 3, 3, 5, 3, 2, 4, NA), ¿cuáles son los niveles de factor(x)?
```{R ejercicioFactor2}
# 1 linea de código
# -------------------
x
```

R/

_Ejercicio 12_

Sea x <- c(11, 22, 47, 47, 11, 47, 11). Si ejecutamos la expresión factor(x, levels=c(11,22,47), ordered=TRUE) cuál será el cuarto elemento que se despliega en la salida?

R/

```{R ejercicioFactor3}
# 2 lineas de código
# -------------------
```
_Ejercicio 13_

Si z <-c("p", "a" , "g", "t", "b"), cuál de las expresiones R reemplazan el tercer elemento en z con "b".

a. factor(z[3]) <-"b"
b. levels(z[3]) <-"b"
c. z[3] <-"b"

R/

```{R ejercicioFactor4}
# 2 lineas de código
# -------------------
z
```

### Listas

Las listas son una colección ordenada de objetos que permite reunir una variedad de estos (posiblemente no relacionados) bajo un mismo nombre. Por ejemplo, podemos tener una lista que contiene una combinación de vectores, matrices, data frames, y otras listas. La forma de crear una lista es a través de la función ```list()```

```mylist <- list(object1, object2, ...)```
Opcionalmente, podemos darles un nombre a los objetos de la lista
```mylist <- list(name1=object1, name2=object2, ...)```
```{R listExample1}
g <- "My first list" 
h <- c(25, 26, 18, 39)
j <- matrix(1:10, nrow = 5)
k <- c("one", "two", "trhee")
mylist <- list(title=g, ages=h, j, k) # create a list
mylist
```
Podemos acceder a los elementos de la lista de la siguiente forma.
```{R listExample2}
mylist[[2]]
mylist[[3]][1,] #retorna la matric e imprime la primera fila
mylist[["ages"]]
```


##Cargar archivos

R tienen la capacidad de cargar conjuntos de información en distintos formatos a nuestro entorno de trabajo. En el siguiente ejemplo veremos distintas formas de cargar archivos .csv y de otro tipo a través de comandos y del mismo RStudio, es muy importante conocer previamente el formato del archivo antes de cargarlo (por ejemplo, si los datos vienen separados por ";", "," y " ").

_Cargar archivos con RStudio_

En la sección de "environment"" podemos encontrar una opción "import Dataset" que nos abrirá unas opciones cargar los archivos los distintos tipos de archivos. 

<img src='https://github.com/urcuqui/Data-Science/blob/master/Utilities/R/import_dataset.png?raw=true' height='250' width='250'>


El anterior proceso es simplemente una abstracción de unos pasos que podemos realizar también a través de código en R, debemos tener cuidado con el separador, el tipo de archivo y conocer cuál es la función para cargarlo. A continuación, veremos cómo llamar a la función que nos permitirá abrir el buscador de archivos de nuestro sistema operativo.

```
file.choose()
```
Existen distintas funciones para cargar los archivos, por ejemplo:

+ read.csv. Carga un archivo csv con separador ","
+ read.csv2. Carga un archivo csv con separador ";" 
+ read.delim. Carga un archivo con separador "\t"

Ahora, podemos integrar la función que nos da la opción para buscar el archivo en nuestro sistema y luego la encargada de cargarlo en nuestro entorno de trabajo. 
```
read.csv2(file.choose())
```
Para el siguiente ejercicio cargue el archivo "parks.csv" y asignelo a una variable "df".

_Ejercicio 14_

```{R example1}
# Escriba en el siguiente espacio el código que permita cargar el archivo parks.csv (1 línea de código)
# --------------------------- #
```
## Ingresando datos desde el teclado 

La función ```edit()``` nos permite ingresar información a través del teclado a algún objeto definido previamente.

_Ejercicio 15_

Ejecute el siguiente código e ingrese los elementos que completen el dataframe.

```{R Inexample1}
mydata <- data.frame(age=numeric(0), gender=character(0), weight=numeric(0))
mydata <- edit(mydata)
```

## Importando desde Excel

La mejor forma es importar archivos tipo CSV (Comma Separated Values) generados desde Excel. Dado el caso se requiera importar directamente desde el archivo entonces podemos utilizar las funciones del paquete xlsx

```{R Inexample2}
#install.packages("xlsx")
library("xlsx")
workbook <- "" # dirección del archivo
mydataframe <- read.xlsx(workbook, 1)
View(mydataframe)
```


##Referencias

+ Kabacoff, R. (2015). R IN ACTION: Data analysis and graphics with R
+ Wickham, H., & Grolemund, G. (2016). R for Data Science.
